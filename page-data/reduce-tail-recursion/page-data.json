{"componentChunkName":"component---src-templates-blog-post-js","path":"/reduce-tail-recursion/","webpackCompilationHash":"ec5842ee4a0f5bf118c9","result":{"data":{"site":{"siteMetadata":{"title":"My Notes","author":"Yasser Zadeh"}},"markdownRemark":{"id":"7434695f-778d-5190-a860-15cc8d061100","excerpt":"To see how reduce function looks so similar to tail recursion implementation. Here we try to implement  function given an array.The old school way using forâ€¦","html":"<p>To see how reduce function looks so similar to tail recursion implementation. Here we try to implement <code class=\"language-text\">sum</code> function given an array.</p>\n<p>The old school way using for-loop (the imperative style):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const sum = arr =&gt; {\n  let acc = 0;\n  for (let i=0; i&lt;arr.length; i++) {\n    const x = arr[i];\n    acc = acc + x;\n  }\n  return acc;\n}</code></pre></div>\n<p>which involves assignments.</p>\n<p>In the <code class=\"language-text\">[].reduce</code> way (the functional programming style):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const sum = arr =&gt; arr.reduce((acc, x) =&gt; acc + x, 0);</code></pre></div>\n<p>But how this relates to recursion:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const sum = arr =&gt; {\n  if (arr.length == 0) return 0\n  else {\n    const [x, ...rest] = arr;\n    return x + sum(rest);\n  }\n}</code></pre></div>\n<p>Not similar. But what if we go with tail recursion:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const sum = arr =&gt; {\n  const helper = (acc, _arr) =&gt; {\n    if (_arr.length == 0) return acc;\n    else {\n      const [x, ...rest] = _arr;\n      return helper(acc + x, rest);\n    }\n  }\n  return helper(0, arr);\n}</code></pre></div>\n<p>Quite similar this time. Just need to extract the recursion part out as our own reduce function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const reduce = (f, initialValue) =&gt; arr =&gt; {\n  const helper = (acc, _arr) =&gt; {\n    if (_arr.length == 0) return acc;\n    else {\n      const [x, ...rest] = _arr;\n      return helper(f(acc, x), rest);\n    }\n  }\n  return helper(initialValue, arr);\n}</code></pre></div>\n<p>Now using above reduce, it almost the same as with <code class=\"language-text\">[].reduce</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const sum = reduce((acc, x) =&gt; acc + x, 0)</code></pre></div>","frontmatter":{"title":"Reduce and Tail Recursion","date":"May 20, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/reduce-tail-recursion/","previous":null,"next":{"fields":{"slug":"/deploy-monorepo/"},"frontmatter":{"title":"Deploy Lerna monorepo using Jenkins and Docker"}}}}}